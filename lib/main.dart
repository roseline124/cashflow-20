import 'package:flutter/material.dart';
import './cashflowGuide.dart';

void main() {
  runApp(CashFlow());
}

String commonFieldValidator(value) {
  if (value.isEmpty) {
    return 'ÏóêÌó§Ïù¥. Ï±ÑÏö∞ÏÖîÏïºÏ£†.';
  }

  int valueNumber = int.tryParse(value);
  if (!(valueNumber is int)) {
    return 'Ïà´ÏûêÎ°ú Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî :(';
  }

  return null;
}

class CashFlow extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '20ÎåÄ ÌÜµÏû• Î∂ÑÎ¶¨ Í∞ÄÏù¥Îìú',
      home: Scaffold(
        appBar: AppBar(title: Text('20ÎåÄ ÌÜµÏû• Î∂ÑÎ¶¨ Í∞ÄÏù¥Îìú')),
        body: CashFlowForm(),
      ),
    );
  }
}

class CashFlowForm extends StatefulWidget {
  CashFlowForm({Key key}) : super(key: key);

  @override
  _CashFlowFormState createState() => _CashFlowFormState();
}

class _CashFlowFormState extends State<CashFlowForm> {
  final _cachFlowFormKey = GlobalKey<FormState>();
  int _totalIncome;
  int _fixedCost;
  int _variableCost;
  int _emergencyFund;
  int _otherCost;

  void setFieldValue(value, fieldName) {
    var parsedValue = int.tryParse(value);
    if (parsedValue is int) {
      setState(() {
        fieldName = parsedValue;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
        padding: EdgeInsets.all(20.0),
        child: Form(
            key: _cachFlowFormKey,
            child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  TextFormField(
                    decoration: const InputDecoration(
                      hintText: 'ÏÑ∏ÌõÑ Ïõî ÏÜåÎìùÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî. (Îã®ÏúÑ: Îßå Ïõê)',
                      labelText: '* Ïõî Í∏âÏó¨',
                    ),
                    validator: (value) {
                      int valueNumber = int.tryParse(value);
                      if (valueNumber == 0) {
                        return 'ÏßÑÏßúÏöî..? üëÄ 1ÏõêÏù¥ÎùºÎèÑ Î≤åÍ≥†ÏûàÎã§Í≥† Ìï¥Ï§òÏöî.';
                      }
                      return commonFieldValidator(value);
                    },
                    onSaved: (value) {
                      var parsedValue = int.tryParse(value);
                      if (parsedValue is int) {
                        setState(() {
                          _totalIncome = parsedValue;
                        });
                      }
                    },
                  ),
                  TextFormField(
                    decoration: const InputDecoration(
                      hintText: 'Ïõî Í≥†Ï†ïÏßÄÏ∂úÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî. (Îã®ÏúÑ: Îßå Ïõê)',
                      labelText: '* Ïõî Í≥†Ï†ïÏßÄÏ∂ú',
                    ),
                    validator: (value) => commonFieldValidator(value),
                    onSaved: (value) {
                      var parsedValue = int.tryParse(value);
                      if (parsedValue is int) {
                        setState(() {
                          _fixedCost = parsedValue;
                        });
                      }
                    },
                  ),
                  TextFormField(
                    decoration: const InputDecoration(
                      hintText: 'Ïõî Î≥ÄÎèôÏßÄÏ∂úÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî. (Îã®ÏúÑ: Îßå Ïõê)',
                      labelText: '* Ïõî Î≥ÄÎèôÏßÄÏ∂ú',
                    ),
                    validator: (value) => commonFieldValidator(value),
                    onSaved: (value) {
                      var parsedValue = int.tryParse(value);
                      if (parsedValue is int) {
                        setState(() {
                          _variableCost = parsedValue;
                        });
                      }
                    },
                  ),
                  TextFormField(
                    decoration: const InputDecoration(
                      hintText: 'ÎπÑÏÉÅÏûêÍ∏àÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî. (Îã®ÏúÑ: Îßå Ïõê)',
                      labelText: '* ÎπÑÏÉÅÏûêÍ∏à',
                    ),
                    validator: (value) => commonFieldValidator(value),
                    onSaved: (value) {
                      var parsedValue = int.tryParse(value);
                      if (parsedValue is int) {
                        setState(() {
                          _emergencyFund = parsedValue;
                        });
                      }
                    },
                  ),
                  TextFormField(
                    decoration: const InputDecoration(
                      hintText: 'Ï†ÅÍ∏à, Ìà¨Ïûê, Ï†ÄÏ∂ï, Î≥¥Ìóò Îì± Í∏∞ÌÉÄÏûêÍ∏àÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî. (Îã®ÏúÑ: Îßå Ïõê)',
                      labelText: '* Í∏∞ÌÉÄ',
                    ),
                    validator: (value) => commonFieldValidator(value),
                    onSaved: (value) {
                      var parsedValue = int.tryParse(value);
                      if (parsedValue is int) {
                        setState(() {
                          _otherCost = parsedValue;
                        });
                      }
                    },
                  ),
                  RaisedButton(
                    onPressed: () {
                      final form = _cachFlowFormKey.currentState;
                      if (_cachFlowFormKey.currentState.validate()) {
                        form.save();
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => CashFlowGuide(
                                    totalIncome: _totalIncome,
                                    fixedCost: _fixedCost,
                                    variableCost: _variableCost,
                                    emergencyFund: _emergencyFund,
                                    otherCost: _otherCost,
                                  )),
                        );
                      }
                    },
                    child: Text('Í∞ÄÏù¥Îìú ÌôïÏù∏ÌïòÍ∏∞'),
                  )
                ])));
  }
}
